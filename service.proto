syntax = "proto3";

package modelservice;

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";

// Описание структуры пассажира
message Passenger {
  int32 passenger_id = 1 [json_name = "PassengerId"];
  int32 pclass = 2 [json_name = "Pclass"];
  string name = 3 [json_name = "Name"];
  string sex = 4 [json_name = "Sex"];
  string age = 5 [json_name = "Age"];
  int32 sibsp = 6 [json_name = "SibSp"];
  int32 parch = 7 [json_name = "Parch"];
  string ticket = 8 [json_name = "Ticket"];
  string fare = 9 [json_name = "Fare"];
  string cabin = 10 [json_name = "Cabin"];
  string embarked = 11 [json_name = "Embarked"];
}

// Набор данных с списком пассажиров и метками (целевой переменной)
message Dataset {
  repeated Passenger X = 1;
  map<int32, int32> y = 2;
}

// Запрос на обучение модели
message TrainRequest {
  string model_type = 1;
  google.protobuf.Struct hyperparameters = 2;
  Dataset dataset = 3;
}

message TrainResponse {
  double accuracy = 1;
  string model_prefix = 2;
  string model_name = 3;
}

// Запрос на предсказание
message PredictRequest {
  string model_name = 1;
  Dataset dataset = 2;
}

message PredictResponse {
  map<int32, int32> predictions = 1;
}

// Запрос на переобучение модели
message RetrainRequest {
  string model_name = 1;
  Dataset dataset = 2;
}

message RetrainResponse {
  double accuracy = 1;
  string model_name = 2;
}

// Ответ со списком обученных моделей
message ListModelsResponse {
  repeated string models = 1;
}

// Запрос на удаление модели
message DeleteModelRequest {
  string model_name = 1;
}

message DeleteModelResponse {
  string detail = 1;
}

// Ответ для проверки состояния системы
message HealthResponse {
  string cpu_usage = 1;
  string memory_usage = 2;
  string disk_usage = 3;
}

// Описание доступной модели
message AvailableModel {
  string model_type = 1;
  string description = 2;
  string params_schema = 3;
}

message ListAvailableModelsResponse {
  repeated AvailableModel models = 1;
}

// Основной сервис с методами
service ModelService {
  rpc TrainModel(TrainRequest) returns (TrainResponse);
  rpc Predict(PredictRequest) returns (PredictResponse);
  rpc Retrain(RetrainRequest) returns (RetrainResponse);
  rpc ListTrainedModels(google.protobuf.Empty) returns (ListModelsResponse);
  rpc DeleteModel(DeleteModelRequest) returns (DeleteModelResponse);
  rpc HealthCheck(google.protobuf.Empty) returns (HealthResponse);
  rpc ListAvailableModels(google.protobuf.Empty) returns (ListAvailableModelsResponse);
}
